name: Daily Reactivation Check
on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight
  workflow_dispatch:  # Allow manual triggering

jobs:
  check-expiring-licenses:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Load Configuration
        id: config
        run: |
          if [ -f "config/activation-config.json" ]; then
            CONFIG=$(cat config/activation-config.json)
            echo "reactivation_enabled=$(echo $CONFIG | jq -r '.activation_settings.reactivation_enabled')" >> $GITHUB_OUTPUT
            echo "notification_email=$(echo $CONFIG | jq -r '.activation_settings.notification_email')" >> $GITHUB_OUTPUT
          else
            echo "reactivation_enabled=true" >> $GITHUB_OUTPUT
            echo "notification_email=" >> $GITHUB_OUTPUT
          fi
      
      - name: Check Expiring Licenses
        id: expiring
        run: |
          python3 scripts/check-expiring-licenses.py
          if [ -f "expiring_licenses.json" ]; then
            EXPIRING_COUNT=$(cat expiring_licenses.json | jq length)
            echo "expiring_count=$EXPIRING_COUNT" >> $GITHUB_OUTPUT
          else
            echo "expiring_count=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Auto-Reactivate Expired Licenses
        if: steps.config.outputs.reactivation_enabled == 'true'
        run: |
          python3 scripts/auto-reactivate.py
      
      - name: Create Reactivation Issues
        if: steps.config.outputs.reactivation_enabled == 'true' && steps.expiring.outputs.expiring_count > 0
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read expiring licenses
            let expiringLicenses = [];
            try {
              const data = fs.readFileSync('expiring_licenses.json', 'utf8');
              expiringLicenses = JSON.parse(data);
            } catch (error) {
              console.log('No expiring licenses found');
              return;
            }
            
            // Create reactivation issues for each expiring license
            for (const license of expiringLicenses) {
              const issueTitle = 'Auto-Reactivation Request - ' + license.company_name + ' - ' + license.hardware_fingerprint;
              const issueBody = '**Automatic License Reactivation Request**\n\n' +
                '**Company Information:**\n' +
                '- Company: ' + license.company_name + '\n' +
                '- Contact Email: ' + license.contact_email + '\n' +
                '- Hardware Fingerprint: ' + license.hardware_fingerprint + '\n' +
                '- Current License Expires: ' + license.expires_date + '\n' +
                '- Reactivation Date: ' + new Date().toISOString() + '\n\n' +
                '**System Information:**\n' +
                '- Platform: Automated Reactivation System\n' +
                '- Reactivation Type: 30-day renewal\n\n' +
                'This is an automatic reactivation request generated by the daily reactivation system.\n' +
                'The license will be automatically renewed for another 30 days.';

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['auto-reactivation', 'license-renewal']
              });
            }
      
      - name: Send Notification Email
        if: steps.config.outputs.notification_email != '' && steps.expiring.outputs.expiring_count > 0
        uses: actions/github-script@v7
        with:
          script: |
            // This would integrate with an email service
            // For now, we'll create a comment on a tracking issue
            const notificationEmail = '${{ steps.config.outputs.notification_email }}';
            const expiringCount = '${{ steps.expiring.outputs.expiring_count }}';
            console.log('Would send notification to ' + notificationEmail + ' about ' + expiringCount + ' expiring licenses');
            
            // Create a tracking issue if it doesn't exist
            const trackingIssueTitle = 'License Reactivation Tracking';
            const currentDate = new Date().toISOString().split('T')[0];
            const trackingIssueBody = '**Daily Reactivation Summary - ' + currentDate + '**\n\n' +
              '**Statistics:**\n' +
              '- Total expiring licenses: ${{ steps.expiring.outputs.expiring_count }}\n' +
              '- Reactivation enabled: ${{ steps.config.outputs.reactivation_enabled }}\n' +
              '- Notification email: ${{ steps.config.outputs.notification_email }}\n\n' +
              '**Action Taken:**\n' +
              '- Automatic reactivation issues created for expiring licenses\n' +
              '- License files updated with new expiration dates\n' +
              '- System continues to monitor for additional expiring licenses\n\n' +
              '---\n' +
              '*This summary was automatically generated by the daily reactivation workflow.*';

            // Try to find existing tracking issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['reactivation-tracking'],
              state: 'open'
            });

            if (issues.data.length > 0) {
              // Update existing tracking issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: trackingIssueBody
              });
            } else {
              // Create new tracking issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: trackingIssueTitle,
                body: trackingIssueBody,
                labels: ['reactivation-tracking', 'automated']
              });
            }