name: Automatic License Activation
on:
  issues:
    types: [opened, edited]
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight for reactivation checks

jobs:
  process-activation:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request == null
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Load Configuration
        id: config
        run: |
          if [ -f "config/activation-config.json" ]; then
            CONFIG=$(cat config/activation-config.json)
            echo "auto_approve=$(echo $CONFIG | jq -r '.activation_settings.auto_approve')" >> $GITHUB_OUTPUT
            echo "max_licenses=$(echo $CONFIG | jq -r '.activation_settings.max_licenses')" >> $GITHUB_OUTPUT
            echo "reactivation_enabled=$(echo $CONFIG | jq -r '.activation_settings.reactivation_enabled')" >> $GITHUB_OUTPUT
            echo "minimum_version=$(echo $CONFIG | jq -r '.activation_settings.minimum_version // "3.2.4"')" >> $GITHUB_OUTPUT
            echo "latest_version=$(echo $CONFIG | jq -r '.activation_settings.latest_version // "3.2.4"')" >> $GITHUB_OUTPUT
          else
            echo "auto_approve=true" >> $GITHUB_OUTPUT
            echo "max_licenses=100" >> $GITHUB_OUTPUT
            echo "reactivation_enabled=true" >> $GITHUB_OUTPUT
            echo "minimum_version=3.2.4" >> $GITHUB_OUTPUT
            echo "latest_version=3.2.4" >> $GITHUB_OUTPUT
          fi
      
      - name: Validate Request
        id: validate
        run: |
          python3 scripts/validate-request.py "${{ github.event.issue.title }}" "${{ github.event.issue.body }}"
      
      - name: Validate Software Version
        id: version
        run: |
          python3 scripts/validate-version.py "${{ github.event.issue.title }}" "${{ github.event.issue.body }}"
        continue-on-error: true
      
      - name: Check License Limits
        id: limits
        run: |
          ACTIVE_COUNT=$(find data/active-licenses -name "*.json" 2>/dev/null | wc -l)
          echo "active_count=$ACTIVE_COUNT" >> $GITHUB_OUTPUT
          if [ $ACTIVE_COUNT -ge ${{ steps.config.outputs.max_licenses }} ]; then
            echo "limit_exceeded=true" >> $GITHUB_OUTPUT
          else
            echo "limit_exceeded=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate License
        id: generate
        if: steps.config.outputs.auto_approve == 'true' && steps.limits.outputs.limit_exceeded == 'false' && steps.version.outputs.version_valid == 'true'
        run: |
          python3 scripts/generate-license.py \
            --fingerprint "${{ steps.validate.outputs.fingerprint }}" \
            --company "${{ steps.validate.outputs.company }}" \
            --email "${{ steps.validate.outputs.email }}" \
            --duration 30
      
      - name: Create License File
        if: steps.config.outputs.auto_approve == 'true' && steps.limits.outputs.limit_exceeded == 'false' && steps.version.outputs.version_valid == 'true'
        run: |
          LICENSE_FILE="data/active-licenses/license-${{ steps.validate.outputs.fingerprint }}.json"
          # Create proper JSON license file
          cat > $LICENSE_FILE << EOF
          {
            "license_key": "${{ steps.generate.outputs.license_key }}",
            "hardware_fingerprint": "${{ steps.validate.outputs.fingerprint }}",
            "company_name": "${{ steps.validate.outputs.company }}",
            "contact_email": "${{ steps.validate.outputs.email }}",
            "created_date": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
            "expires_date": "${{ steps.generate.outputs.expires_date }}",
            "status": "active",
            "version": "3.2.0",
            "auto_generated": true,
            "reactivation_required": true,
            "generated_by": "github-actions",
            "generation_method": "automated"
          }
          EOF
          
          # Create license history entry
          HISTORY_FILE="data/license-history/license-${{ steps.validate.outputs.fingerprint }}-$(date +%Y%m%d-%H%M%S).json"
          cp $LICENSE_FILE $HISTORY_FILE
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add $LICENSE_FILE $HISTORY_FILE
          git commit -m "Auto-generated license for ${{ steps.validate.outputs.company }}"
          git push
      
      - name: Close Issue with License Info
        if: steps.config.outputs.auto_approve == 'true' && steps.limits.outputs.limit_exceeded == 'false' && steps.version.outputs.version_valid == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ **License Approved and Generated Automatically**\n\n' +
                    'Your license has been created and is available for download.\n\n' +
                    '**License Details:**\n' +
                    '- Company: ${{ steps.validate.outputs.company }}\n' +
                    '- Hardware Fingerprint: ${{ steps.validate.outputs.fingerprint }}\n' +
                    '- License Key: ${{ steps.generate.outputs.license_key }}\n' +
                    '- Expires: ${{ steps.generate.outputs.expires_date }}\n\n' +
                    'Your client application should automatically download the license within a few minutes.\n\n' +
                    '**Next Steps:**\n' +
                    '1. Your client will automatically check for the license\n' +
                    '2. The license will be downloaded and installed\n' +
                    '3. Your application will start normally\n' +
                    '4. The license will automatically renew in 30 days'
            });
            
            github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            });
      
      - name: Reject Request
        if: steps.config.outputs.auto_approve == 'false' || steps.limits.outputs.limit_exceeded == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            let reason = '';
            if ('${{ steps.config.outputs.auto_approve }}' === 'false') {
              reason = 'Automatic approval is currently disabled by the host. Please contact the administrator.';
            } else if ('${{ steps.limits.outputs.limit_exceeded }}' === 'true') {
              reason = 'Maximum license limit reached. Please contact the administrator for assistance.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **License Request Rejected**\n\n' + reason + '\n\n' +
                    '**Current Status:**\n' +
                    '- Auto-approval: ${{ steps.config.outputs.auto_approve }}\n' +
                    '- Active licenses: ${{ steps.limits.outputs.active_count }}\n' +
                    '- Max licenses: ${{ steps.config.outputs.max_licenses }}\n\n' +
                    'Please contact the system administrator for assistance.'
            });
            
            github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            });
      
      - name: Reject Outdated Version
        if: steps.version.outputs.version_valid != 'true' && github.event.issue.pull_request == null
        uses: actions/github-script@v7
        with:
          script: |
            const versionMessage = '${{ steps.version.outputs.version_message }}';
            const clientVersion = '${{ steps.version.outputs.client_version }}';
            const minimumVersion = '${{ steps.config.outputs.minimum_version }}';
            const latestVersion = '${{ steps.config.outputs.latest_version }}';
            const warningOnly = '${{ steps.version.outputs.warning_only }}' === 'true';
            
            const body = '❌ **License Request Rejected - Outdated Software Version**\n\n' +
              '**Version Information:**\n' +
              '- Your Version: ' + clientVersion + '\n' +
              '- Minimum Required: ' + minimumVersion + '\n' +
              '- Latest Version: ' + latestVersion + '\n\n' +
              '**Reason:**\n' +
              versionMessage + '\n\n' +
              '**Action Required:**\n' +
              '1. Contact your software vendor to obtain version ' + latestVersion + '\n' +
              '2. Install the updated software\n' +
              '3. Request activation again with the new version\n\n' +
              '**Why Update?**\n' +
              '- Latest bug fixes and improvements\n' +
              '- Enhanced features and performance\n' +
              '- Better security\n' +
              '- Improved user experience\n\n' +
              'Using outdated software may result in compatibility issues and missing features.\n\n' +
              '**Support Contact:**\n' +
              'For assistance with updating your software, contact:\n' +
              'chengchao.josh.huang@gmail.com';
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
            
            await github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              labels: ['rejected', 'outdated-version']
            });
